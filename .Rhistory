# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# calibration
plotCalibration(Grace_data,7,preds_GP_CRP,groups=20)
logistic.display(fit_full)
logistic.display(fit_breaths)
# reduce model using Likelihood ratio test (p ≥0.1 → model reduction is allowed)
fit_red1 = glm(pneumonia ~ breaths_min, family=binomial, data=Grace_data)
lrtest(fit_full, fit_red1) # p<0.1 full model is better
# oral_temp
fit_red2 <- glm(pneumonia ~ Oral_temp, family=binomial, data=Grace_data)
fit_red2
lrtest(fit_full, fit_red1, fit_red2) # p<0.1 full model is better
lrtest(fit_red1, fit_red2) # p<0.1 full model is better
lrtest(fit_full, fit_red1) # p<0.1 full model is better
lrtest(fit_full, fit_red2)
# reduce model using Likelihood ratio test (p ≥0.1 → model reduction is allowed)
# breaths_min
fit_red1 = glm(pneumonia ~ breaths_min, family=binomial, data=Grace_data)
lrtest(fit_full, fit_red1) # p<0.1 full model is better
lrtest(fit_full, fit_red2)
lrtest(fit_full, fit_red1) # p<0.1 full model is better
# check significance of each variable
# cough_sev
fit_null = glm(pneumonia ~ 1, family=binomial, data=Grace_data)
fit_cough = glm(pneumonia ~ Cough_sev, family=binomial, data=Grace_data)
lrtest(fit_cough,fit_null)
logistic.display(fit_cough) # p>0.15
logistic.display(fit_null)
logistic.display(fit_null)
logistic.display(fit_cough) # p>0.15
summary(fit_cough)
exp(summary(fit_cough))
exp(OR = coef(fit_cough), confint(fit_cough,level = 0.95))
exp(cbind(OR = coef(fit_cough), confint(fit_cough,level = 0.95)))
# reduce model using Likelihood ratio test (p ≥0.1 → model reduction is allowed)
# breaths_min
fit_red1 = glm(pneumonia ~ breaths_min, family=binomial, data=Grace_data)
# oral_temp
fit_red2 <- glm(pneumonia ~ Oral_temp, family=binomial, data=Grace_data)
lrtest(fit_full, fit_red1) # p<0.1 full model is better
lrtest(fit_full, fit_red1) # p<0.1 full model is better
exp(cbind(OR = coef(fit_full), confint(fit_full,level = 0.95)))
# full model
fit_final = glm(pneumonia ~ Oral_temp + breaths_min, family=binomial, data=Grace_data)
# predicted probabilities obtained from the final model
preds = predict(fit_final, type="response")
# calibration
plotCalibration(Grace_data,7,preds,groups=20) # obtain calibration plot and p-value of Hosmer-Lemeshow goodness-of-fit test
# why 7, column number for outcome
which(colnames(Grace_data)=="pneumonia") # = 7
# discrimination
roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE) # Obtain AUC and ROC plot
# calibration
plotCalibration(Grace_data,7,preds,groups=20) # obtain calibration plot and p-value of Hosmer-Lemeshow goodness-of-fit test
# discrimination
roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE) # Obtain AUC and ROC plot
lrtest(fit_full, fit_red1) # p<0.1 inclusion in full model is better
# full model
fit_final = glm(pneumonia ~ breaths_min, family=binomial, data=Grace_data)
# predicted probabilities obtained from the final model
preds = predict(fit_final, type="response")
# calibration
plotCalibration(Grace_data,7,preds,groups=20) # obtain calibration plot and p-value of Hosmer-Lemeshow goodness-of-fit test
# why 7, column number for outcome
which(colnames(Grace_data)=="pneumonia") # = 7
# discrimination
roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE) # Obtain AUC and ROC plot
# calibration
plotCalibration(Grace_data,7,preds,groups=20) # obtain calibration plot and p-value of Hosmer-Lemeshow goodness-of-fit test
# including model variables with p<0.15 from univariable analysis
fit_full = glm(pneumonia ~ Oral_temp + breaths_min, family=binomial, data=Grace_data)
summary(fit_full)
exp(cbind(OR = coef(fit_full), confint(fit_full,level = 0.95)))
# reduce model using Likelihood ratio test (p ≥0.1 → model reduction is allowed)
# breaths_min
fit_red1 = glm(pneumonia ~ breaths_min, family=binomial, data=Grace_data)
# full model
fit_final = glm(pneumonia ~ Oral_temp + breaths_min, family=binomial, data=Grace_data)
# predicted probabilities obtained from the final model
preds = predict(fit_final, type="response")
# calibration
plotCalibration(Grace_data,7,preds,groups=20) # obtain calibration plot and p-value of Hosmer-Lemeshow goodness-of-fit test
# why 7, column number for outcome
which(colnames(Grace_data)=="pneumonia") # = 7
# discrimination
roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE) # Obtain AUC and ROC plot
# full model
fit_final = glm(pneumonia ~ breaths_min, family=binomial, data=Grace_data)
# predicted probabilities obtained from the final model
preds = predict(fit_final, type="response")
# calibration
plotCalibration(Grace_data,7,preds,groups=20) # obtain calibration plot and p-value of Hosmer-Lemeshow goodness-of-fit test
# why 7, column number for outcome
which(colnames(Grace_data)=="pneumonia") # = 7
# discrimination
roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE) # Obtain AUC and ROC plot
# add CRP to the final model based on signs and symptoms & assess the significance of CRP based on Likelihood ratio test
fit_final_CRP = glm(pneumonia ~ Oral_temp + breaths_min + CRP, family=binomial, data=Grace_data)
lrtest(fit_final_CRP, fit_final)
summary(fit_final_CRP)
exp(cbind(OR = coef(fit_final_CRP), confint(fit_final_CRP,level = 0.95)))
# Model performance
# Predicted probabilities from CRP model
preds_CRP <- predict(fit_final_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
# comparison of two plots
plot.roc(Grace_data$pneumonia, preds, main="ROC comparison", col= "red")
lines.roc(Grace_data$pneumonia, preds_CRP, col="blue")
legend("bottomright",
legend = c("signs and symptoms", "signs and symptoms + CRP"),
col = c("red", "blue"),
lwd = 4)
# Using formal test
roc_symptom = roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE)
roc_symptom_CRP = roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
roc.test(roc_symptom,roc_symptom_CRP)
# Net reclassification improvement
reclassification(Grace_data,7, preds, preds_CRP,c(0,0.025,0.20,1))
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
# full model
fit_final = glm(pneumonia ~ Oral_temp + breaths_min, family=binomial, data=Grace_data)
# predicted probabilities obtained from the final model
preds = predict(fit_final, type="response")
# calibration
plotCalibration(Grace_data,7,preds,groups=20) # obtain calibration plot and p-value of Hosmer-Lemeshow goodness-of-fit test
# why 7, column number for outcome
which(colnames(Grace_data)=="pneumonia") # = 7
# discrimination
roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE) # Obtain AUC and ROC plot
# add CRP to the final model based on signs and symptoms & assess the significance of CRP based on Likelihood ratio test
fit_final_CRP = glm(pneumonia ~ Oral_temp + breaths_min + CRP, family=binomial, data=Grace_data)
lrtest(fit_final_CRP, fit_final)
summary(fit_final_CRP)
exp(cbind(OR = coef(fit_final_CRP), confint(fit_final_CRP,level = 0.95)))
# Model performance
# Predicted probabilities from CRP model
preds_CRP <- predict(fit_final_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
# comparison of two plots
plot.roc(Grace_data$pneumonia, preds, main="ROC comparison", col= "red")
lines.roc(Grace_data$pneumonia, preds_CRP, col="blue")
legend("bottomright",
legend = c("signs and symptoms", "signs and symptoms + CRP"),
col = c("red", "blue"),
lwd = 4)
# Using formal test
roc_symptom = roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE)
roc_symptom_CRP = roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
roc.test(roc_symptom,roc_symptom_CRP)
# Net reclassification improvement
reclassification(Grace_data,7, preds, preds_CRP,c(0,0.025,0.20,1))
exp(cbind(OR = coef(fit_final_CRP), confint(fit_final_CRP,level = 0.95)))
summary(fit_final_CRP)
summary(fit_full)
summary(fit_final_CRP)
exp(cbind(OR = coef(fit_final_CRP), confint(fit_final_CRP,level = 0.95)))
lrtest(fit_final_CRP, fit_final)
# add CRP to the final model based on signs and symptoms & assess the significance of CRP based on Likelihood ratio test
fit_final_CRP = glm(pneumonia ~ Oral_temp + breaths_min + CRP, family=binomial, data=Grace_data)
lrtest(fit_final_CRP, fit_final)
summary(fit_final_CRP)
exp(cbind(OR = coef(fit_final_CRP), confint(fit_final_CRP,level = 0.95)))
# Model performance
# Predicted probabilities from CRP model
preds_CRP <- predict(fit_final_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
# comparison of two plots
plot.roc(Grace_data$pneumonia, preds, main="ROC comparison", col= "red")
lines.roc(Grace_data$pneumonia, preds_CRP, col="blue")
legend("bottomright",
legend = c("signs and symptoms", "signs and symptoms + CRP"),
col = c("red", "blue"),
lwd = 4)
# Using formal test
roc_symptom = roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE)
roc_symptom_CRP = roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
roc.test(roc_symptom,roc_symptom_CRP)
# Net reclassification improvement
reclassification(Grace_data,7, preds, preds_CRP,c(0,0.025,0.20,1))
# GP's clinical judgement = suspected pneumonia
GP_null <- glm(pneumonia ~ 1, family=binomial, data=Grace_data)
GP = glm(pneumonia ~Suspected_pneumonia , family=binomial, data=Grace_data) # predict the probability of pneumonia based on the predictor variable Suspected_pneumonia
lrtest(GP_null, GP)
summary(GP)
exp(cbind(OR = coef(GP), confint(GP,level = 0.95)))
# predict
preds_GP <- predict(GP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_GP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_GP, plot=TRUE, print.auc=TRUE)
# added value of GP to the original model of GPs clinical judgement
GP_CRP = glm(pneumonia ~Suspected_pneumonia + CRP, family=binomial, data=Grace_data)
lrtest(GP_CRP, GP)
summary(GP_CRP)
exp(cbind(OR = coef(GP_CRP), confint(GP_CRP,level = 0.95)))
# predict
preds_GP_CRP <- predict(GP_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_GP_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_GP_CRP, plot=TRUE, print.auc=TRUE)
exp(cbind(OR = coef(GP_CRP), confint(GP_CRP,level = 0.95)))
# net reclassification improvement
reclassification(Grace_data,7, preds_GP, preds_GP_CRP,c(0,0.025,0.20,1))
# calibration
plotCalibration(Grace_data,7,preds_GP_CRP,groups=20)
lrtest(GP_CRP, GP)
# ROC GP
roc_GP <- roc(Grace_data$pneumonia, preds_GP, plot=TRUE, print.auc=TRUE)
# ROC GP_CRP
roc_GP_CRP <- roc(Grace_data$pneumonia, preds_GP_CRP, plot=TRUE, print.auc=TRUE)
# plot comparison
plot.roc(Grace_data$pneumonia, preds_GP, main="ROC comparison", col= "red")
lines.roc(Grace_data$pneumonia, preds_GP_CRP, col="blue")
legend("bottomright",
legend = c("GPs clinical judgement", "GPs clinical judgement + CRP"),
col = c("red", "blue"),
lwd = 4)
# formal test
roc.test(roc_GP, roc_GP_CRP)
# net reclassification improvement
reclassification(Grace_data,7, preds_GP, preds_GP_CRP,c(0,0.025,0.20,1))
lrtest(GP_null, GP)
summary(GP)
exp(cbind(OR = coef(GP), confint(GP,level = 0.95)))
# GP's clinical judgement = suspected pneumonia
GP_null <- glm(pneumonia ~ 1, family=binomial, data=Grace_data)
GP = glm(pneumonia ~Suspected_pneumonia , family=binomial, data=Grace_data) # predict the probability of pneumonia based on the predictor variable Suspected_pneumonia
lrtest(GP_null, GP)
summary(GP)
exp(cbind(OR = coef(GP), confint(GP,level = 0.95)))
# predict
preds_GP <- predict(GP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_GP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_GP, plot=TRUE, print.auc=TRUE)
# added value of GP to the original model of GPs clinical judgement
GP_CRP = glm(pneumonia ~Suspected_pneumonia + CRP, family=binomial, data=Grace_data)
lrtest(GP_CRP, GP)
summary(GP_CRP)
exp(cbind(OR = coef(GP_CRP), confint(GP_CRP,level = 0.95)))
# predict
preds_GP_CRP <- predict(GP_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_GP_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_GP_CRP, plot=TRUE, print.auc=TRUE)
exp(cbind(OR = coef(GP_CRP), confint(GP_CRP,level = 0.95)))
# added value of GP to the original model of GPs clinical judgement
GP_CRP = glm(pneumonia ~Suspected_pneumonia + CRP, family=binomial, data=Grace_data)
lrtest(GP_CRP, GP)
summary(GP_CRP)
exp(cbind(OR = coef(GP_CRP), confint(GP_CRP,level = 0.95)))
# predict
preds_GP_CRP <- predict(GP_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_GP_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_GP_CRP, plot=TRUE, print.auc=TRUE)
lrtest(GP_CRP, GP)
# calibration
plotCalibration(Grace_data,7,preds_GP_CRP,groups=20)
lrtest(fit_final_CRP, fit_final)
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
# comparison of two plots
plot.roc(Grace_data$pneumonia, preds, main="ROC comparison", col= "red")
plot.roc(Grace_data$pneumonia, preds, main="ROC comparison", col= "red")
lines.roc(Grace_data$pneumonia, preds_CRP, col="blue")
legend("bottomright",
legend = c("signs and symptoms", "signs and symptoms + CRP"),
col = c("red", "blue"),
lwd = 4)
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
# Model performance
# Predicted probabilities from CRP model
preds_CRP <- predict(fit_final_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# calibration
plotCalibration(Grace_data,7,preds_GP_CRP,groups=20)
# net reclassification improvement
reclassification(Grace_data,7, preds_GP, preds_GP_CRP,c(0,0.025,0.20,1))
# add CRP to the final model based on signs and symptoms & assess the significance of CRP based on Likelihood ratio test
fit_final_CRP = glm(pneumonia ~ Oral_temp + breaths_min + CRP, family=binomial, data=Grace_data)
lrtest(fit_final_CRP, fit_final)
summary(fit_final_CRP)
exp(cbind(OR = coef(fit_final_CRP), confint(fit_final_CRP,level = 0.95)))
# Model performance
# Predicted probabilities from CRP model
preds_CRP <- predict(fit_final_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
# comparison of two plots
plot.roc(Grace_data$pneumonia, preds, main="ROC comparison", col= "red")
lines.roc(Grace_data$pneumonia, preds_CRP, col="blue")
legend("bottomright",
legend = c("signs and symptoms", "signs and symptoms + CRP"),
col = c("red", "blue"),
lwd = 4)
# Using formal test
roc_symptom = roc(Grace_data$pneumonia, preds, plot=TRUE, print.auc=TRUE)
roc_symptom_CRP = roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
roc.test(roc_symptom,roc_symptom_CRP)
# Net reclassification improvement
reclassification(Grace_data,7, preds, preds_CRP,c(0,0.025,0.20,1))
exp(cbind(OR = coef(fit_cough), confint(fit_cough,level = 0.95)))
summary(fit_cough) # p>0.15
summary(fit_oral) # p<0.15 # include in multivariate model
exp(cbind(OR = coef(fit_Oral), confint(fit_Oral,level = 0.95)))
# oral_temp
fit_oral = glm(pneumonia ~ Oral_temp, family=binomial, data=Grace_data)
lrtest(fit_oral,fit_null)
summary(fit_oral) # p<0.15 # include in multivariate model
exp(cbind(OR = coef(fit_Oral), confint(fit_Oral,level = 0.95)))
exp(cbind(OR = coef(fit_oral), confint(fit_oral,level = 0.95)))
# phlegm_colour
fit_phlegm = glm(pneumonia ~ Phlegm_colour, family=binomial, data=Grace_data)
lrtest(fit_phlegm,fit_null)
summary(fit_phlegm) # p>0.15
exp(cbind(OR = coef(fit_Phlegm), confint(fit_Phlegm,level = 0.95)))
exp(cbind(OR = coef(fit_phlegm), confint(fit_phlegm,level = 0.95)))
# breaths_min
fit_breaths = glm(pneumonia ~ breaths_min, family=binomial, data=Grace_data)
lrtest(fit_breaths,fit_null)
summary(fit_breaths) # p<0.15 # include in multivariate model
exp(cbind(OR = coef(fit_breaths), confint(fit_breaths,level = 0.95)))
# including model variables with p<0.15 from univariable analysis
fit_full = glm(pneumonia ~ Oral_temp + breaths_min, family=binomial, data=Grace_data)
summary(fit_full)
exp(cbind(OR = coef(fit_full), confint(fit_full,level = 0.95)))
# add CRP to the final model based on signs and symptoms & assess the significance of CRP based on Likelihood ratio test
fit_final_CRP = glm(pneumonia ~ Oral_temp + breaths_min + CRP, family=binomial, data=Grace_data)
lrtest(fit_final_CRP, fit_final)
summary(fit_final_CRP)
exp(cbind(OR = coef(fit_final_CRP), confint(fit_final_CRP,level = 0.95)))
# added value of GP to the original model of GPs clinical judgement
GP_CRP = glm(pneumonia ~Suspected_pneumonia + CRP, family=binomial, data=Grace_data)
lrtest(GP_CRP, GP)
summary(GP_CRP)
exp(cbind(OR = coef(GP_CRP), confint(GP_CRP,level = 0.95)))
# net reclassification improvement
reclassification(Grace_data,7, preds_GP, preds_GP_CRP,c(0,0.025,0.20,1))
# predict
preds_GP_CRP <- predict(GP_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_GP_CRP,groups=20)
# discrimination
roc(Grace_data$pneumonia, preds_GP_CRP, plot=TRUE, print.auc=TRUE)
# net reclassification improvement
reclassification(Grace_data,7, preds_GP, preds_GP_CRP,c(0,0.025,0.20,1))
# formal test
roc.test(roc_GP, roc_GP_CRP)
# discrimination
roc(Grace_data$pneumonia, preds_CRP, plot=TRUE, print.auc=TRUE)
# Model performance
# Predicted probabilities from CRP model
preds_CRP <- predict(fit_final_CRP, type = "response")
# calibration
plotCalibration(Grace_data,7,preds_CRP,groups=20)
# calibration
plotCalibration(Grace_data,7,preds_GP,groups=20)
# net reclassification improvement
reclassification(Grace_data,7, preds_GP, preds_GP_CRP,c(0,0.025,0.20,1))
# Net reclassification improvement
reclassification(Grace_data,7, preds, preds_CRP,c(0,0.025,0.20,1))
parameters <- list(b1 = 1.545721,                           # mean seasonal transmission rate
phi = 0.6924976,                         # seasonal offset/peak transmission seasonal
psi = 5.068942,                          # width of seasonal peak/standard deviation
sigma = 1/4.98,                          # susceptibility to primary infection
delta1 = 0.9325575,                      # relative susceptibility to secondary infection, relative to  primary infection
delta2 = 0.7280313*delta1,               # relative susceptibility to tertiary infection, relative to secondary infection
delta3 = 0.35790461*delta2,              # relative susceptibility to subsequent infections after third infection, relative to tertiary infection
Na = Nb,                                 # population size for age group a
alpha = 0.5215113,                       # reduction in infectiousness of asymptomatic infections
p_contact = resceudata$contactMatrixPhy, # matrix total number of daily physical contacts made by age group a with age group b
c_contact = resceudata$contactMatrixCon, # matrix total number of daily conversational contacts made by age group a with age group b
propR = propR,                           # proportion of neonates born with protection
prob = prob,                             # proportion of persons in age group a who still have maternal protection given a rate of loss of maternal protection
prop0 = prop0,                           # proportion of persons in age group a who have experienced 0 number of previous infections
prop1 = prop1,                           # proportion of persons in age group a who have experienced 1 number of previous infections
prop2 = prop2,                           # proportion of persons in age group a who have experienced 2 number of previous infections
prop3 = prop3,                           # proportion of persons in age group a who have experienced 3 number of previous infections
mu = 1863,                               # daily birth rate
xi = 1/133.5,                            # rate of loss maternal immunity
probA = probA,                           # probability infection is asymptomatic
gamma0 = 1/7.069876,                     # rate of loss of primary infectiousness
gamma1 = 1/(gamma0*0.9118119),           # proportional decrease between secondary and primary infection
gamma2 = 1/(gamma0*gamma1*0.6258454),    # proportional decrease between tertiary and secondary infection
gamma3 = 1,                              # duration of infectiousness for all infections after tertiary infection
omega = 1/358.9,                         # rate of loss of post-infection immunity
l1 = 0.08156498,                         # proportion of persons infected
l2 = 0.5454382,                          # proportion of persons uninfected and protected
qp = 0.4904056,                          # probability of transmission per physical contact
qc = 0.5083735                           # probability of transmission per conversational contact
)
parameters <- c(b1 = 1.545721,                           # mean seasonal transmission rate
phi = 0.6924976,                         # seasonal offset/peak transmission seasonal
psi = 5.068942,                          # width of seasonal peak/standard deviation
sigma = 1/4.98,                          # susceptibility to primary infection
delta1 = 0.9325575,                      # relative susceptibility to secondary infection, relative to  primary infection
delta2 = 0.7280313*delta1,               # relative susceptibility to tertiary infection, relative to secondary infection
delta3 = 0.35790461*delta2,              # relative susceptibility to subsequent infections after third infection, relative to tertiary infection
Na = Nb,                                 # population size for age group a
alpha = 0.5215113,                       # reduction in infectiousness of asymptomatic infections
p_contact = resceudata$contactMatrixPhy, # matrix total number of daily physical contacts made by age group a with age group b
c_contact = resceudata$contactMatrixCon, # matrix total number of daily conversational contacts made by age group a with age group b
propR = propR,                           # proportion of neonates born with protection
prob = prob,                             # proportion of persons in age group a who still have maternal protection given a rate of loss of maternal protection
prop0 = prop0,                           # proportion of persons in age group a who have experienced 0 number of previous infections
prop1 = prop1,                           # proportion of persons in age group a who have experienced 1 number of previous infections
prop2 = prop2,                           # proportion of persons in age group a who have experienced 2 number of previous infections
prop3 = prop3,                           # proportion of persons in age group a who have experienced 3 number of previous infections
mu = 1863,                               # daily birth rate
xi = 1/133.5,                            # rate of loss maternal immunity
probA = probA,                           # probability infection is asymptomatic
gamma0 = 1/7.069876,                     # rate of loss of primary infectiousness
gamma1 = 1/(gamma0*0.9118119),           # proportional decrease between secondary and primary infection
gamma2 = 1/(gamma0*gamma1*0.6258454),    # proportional decrease between tertiary and secondary infection
gamma3 = 1,                              # duration of infectiousness for all infections after tertiary infection
omega = 1/358.9,                         # rate of loss of post-infection immunity
l1 = 0.08156498,                         # proportion of persons infected
l2 = 0.5454382,                          # proportion of persons uninfected and protected
qp = 0.4904056,                          # probability of transmission per physical contact
qc = 0.5083735                           # probability of transmission per conversational contact
)
library(ggplot2)
# Assuming you have data in the following format for the markers:
# disease_progression <- data.frame(
#   Stage = c(1, 2, 3, 4, 5, 6, 7, 8),
#   GreenMarker = c(0.1, 0.2, 0.5, 1.2, 2.5, 3.5, 4.0, 4.5),
#   YellowMarker = c(0.0, 0.0, 0.2, 0.8, 1.5, 2.5, 3.5, 4.0),
#   RedMarker = c(0.0, 0.0, 0.0, 0.0, 0.8, 1.5, 2.5, 3.5)
# )
# Create a basic plot
ggplot(disease_progression, aes(x = Stage)) +
geom_line(aes(y = GreenMarker, color = "green")) +
geom_line(aes(y = YellowMarker, color = "yellow")) +
geom_line(aes(y = RedMarker, color = "red")) +
geom_hline(yintercept = 1, linetype = "dashed") +  # Detection Threshold
scale_color_identity() +
theme_minimal() +
labs(x = "Disease Progression", y = "Marker Level") +
scale_x_continuous(breaks = 1:8, labels = c("Pre-disease", "Early Stage", "Established", "Late Stage")) +
annotate("rect", xmin = 1, xmax = 2, ymin = 0, ymax = Inf, fill = "green", alpha = 0.2) +
annotate("rect", xmin = 3, xmax = 4, ymin = 0, ymax = Inf, fill = "yellow", alpha = 0.2) +
annotate("rect", xmin = 5, xmax = 8, ymin = 0, ymax = Inf, fill = "red", alpha = 0.2) +
theme(legend.position = "none")
library(ggplot2)
# Assuming you have data in the following format for the markers:
disease_progression <- data.frame(
Stage = c(1, 2, 3, 4, 5, 6, 7, 8),
GreenMarker = c(0.1, 0.2, 0.5, 1.2, 2.5, 3.5, 4.0, 4.5),
YellowMarker = c(0.0, 0.0, 0.2, 0.8, 1.5, 2.5, 3.5, 4.0),
RedMarker = c(0.0, 0.0, 0.0, 0.0, 0.8, 1.5, 2.5, 3.5) )
# Create a basic plot
ggplot(disease_progression, aes(x = Stage)) +
geom_line(aes(y = GreenMarker, color = "green")) +
geom_line(aes(y = YellowMarker, color = "yellow")) +
geom_line(aes(y = RedMarker, color = "red")) +
geom_hline(yintercept = 1, linetype = "dashed") +  # Detection Threshold
scale_color_identity() +
theme_minimal() +
labs(x = "Disease Progression", y = "Marker Level") +
scale_x_continuous(breaks = 1:8, labels = c("Pre-disease", "Early Stage", "Established", "Late Stage")) +
annotate("rect", xmin = 1, xmax = 2, ymin = 0, ymax = Inf, fill = "green", alpha = 0.2) +
annotate("rect", xmin = 3, xmax = 4, ymin = 0, ymax = Inf, fill = "yellow", alpha = 0.2) +
annotate("rect", xmin = 5, xmax = 8, ymin = 0, ymax = Inf, fill = "red", alpha = 0.2) +
theme(legend.position = "none")
setwd("/Users/vincentarumadri/Desktop/Epi/Modelling Internship & thesis/master_thesis_ua")
source("functions/")
source("functions/Run_Interventions.R")
rm(list = ls())
source("functions/Run_Interventions.R")
View(RunInterventions)
source("functions/RunInterventions.R")
source("parameters.R")
source("functions/parameters 2.R")
source("functions/parameters.R")
source("functions/parameters.R")
rm(list = ls())
source("functions/parameters.R")
source("functions/parameters.R")
load(here::here("data/other/posteriors_resceu_.RData"))
load(here::here("data/other/rsv_data_resceu.RData"))
source("functions/parameters.R")
View(output1)
load(here::here("functions/RunInterventions.R"))
source("functions/RunInterventions.R")
View(output1)
