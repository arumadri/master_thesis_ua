x[pj + 5*sg + 0*rg + i] + x[pj + 5*sg + 1*rg + i] + x[pj + 5*sg + 2*rg + i])
}
}
}
## p defined
cpmu <- cpo <- cMmu <- cMo <- cLo <- cMa <- cpmu_dose <- cpo_dose <- cMmu_dose <- cMo_dose <- cLo_dose <- cMa_dose <- 0
p <- a * ag + s * sg + r * rg
q <- a * ag + kpc + r * rg
o <- ifelse(s > 3, a * ag + (s - 3) * sg + r * rg, 0)
if (s > 3)
o = a * ag + (s-3) * sg + r * rg
if (s < 3) {
cpmu <- 0
cpmu_dose <- 0
cpo <- 0
cpo_dose <- 0
cMmu <- 0
cMmu_dose <- 0
cMo <- 0
cMo_dose <- 0
cLo <- 0
cLo_dose <- 0
cMa <- 0
cMa_dose <- 0
SN <- 1
lossMS2 <- lossMS1 <- lossMS0 <- lossP <- 0
step_in <- step_out <- step_in_S0 <- step_in_S1 <- 0
loss_mat <- loss_lav_S0 <-  loss_lav_S1 <- loss_lav_S2 <- loss_lav_S3 <- lossMS0 <- lossMS1 <- lossMS2 <- 0
} else {
if (r == 1) {
loss_mat <- loss_lav_S0 <- loss_lav_S1 <- loss_lav_S2 <- loss_lav_S3 <- 0
lossMS0 <- x[p + 26] * eff_wane_vhr
lossMS1 <- x[p + 29] * eff_wane_vhr
lossMS2 <- x[p + 32] * eff_wane_vhr
} else if (r == 3) {
loss_mat <- x[p + 23] * eff_wane_mat
lossMS0 <- x[p + 26] * eff_wane_mab
lossMS1 <- x[p + 29] * eff_wane_mab
lossMS2 <- x[p + 32] * eff_wane_mab
loss_lav_S0 <- x[p + 35] * eff_wane_lav
loss_lav_S1 <- x[p + 38] * eff_wane_lav
loss_lav_S2 <- x[p + 41] * eff_wane_lav
loss_lav_S3 <- x[p + 44] * eff_wane_lav
} else if (r == 2) {
loss_mat <- loss_lav_S0 <- loss_lav_S1 <- loss_lav_S2 <- loss_lav_S3 <- lossMS0 <- lossMS1 <- lossMS2 <- 0
}
cpmu <- 0
cpmu_dose <- 0
cpo <- 0
cpo_dose <- 0
cMmu <- 0
cMmu_dose <- 0
cMo <- 0
cMo_dose <- 0
cLo <- 0
cLo_dose <- 0
cMa <- 0
cMa_dose <- 0
step_in <- step_out <- step_in_S0 <- step_in_S1 <- 0
if (a == 1) {
M <- x[a*ag + (s-3)*sg + r*rg + 0]
S0 <- x[a*ag + (s-3)*sg + r*rg + 1]
S1 <- x[a*ag + (s-3)*sg + r*rg + 6]
S2 <- x[a*ag + (s-3)*sg + r*rg + 11]
S3 <- x[a*ag + (s-3)*sg + r*rg + 16]
if (r == 1) {
if(s == 5) {
step_in_S0 <- 0
step_in_S1 <- 0
step_out_dose <- step_out_dose + cal_mAB_VHR_step_out_dose[t1, 1] # Adding 1 to R index
}
step_out <- cal_mAB_VHR_step_out[t1, 1]
cMo <- cal_mAB_VHR(t1, 1)
cMo_dose <- cal_mAB_VHR_dose(t1, 1)
} else if (r == 2) {
if(s == 5) {
step_in_S0 <- 0
step_in_S1 <- 0
step_out_dose <- step_out_dose + cal_mAB_HR_step_out_dose[t1, 1]
}
step_out <- cal_mAB_HR_step_out[t1, 1]
cMo <- cal_mAB_HR(t1, 1)
cMo_dose <- cal_mAB_HR_dose(t1, 1)
} else {
if(s == 5) {
step_in_S0 <- collect_protect(t, 4) + collect_protect(t, 0) + collect_protect(t, 2)
step_in_S1 <- collect_protect(t, 5) + collect_protect(t, 1) + collect_protect(t, 3)
step_out_dose <- step_out_dose + cal_mAB_LR_step_out_dose[t1, 1]
}
step_out <- cal_mAB_LR_step_out[t1, 1]
cMo <- cal_mAB_LR(t1, 0)
cMo_dose <- cal_mAB_LR_dose(t1, 0)
}
} else if (a > 1) {
M <- x[a*ag + (s-3)*sg + r*rg + 0]
if (r == 1) {
if(s == 5) {
step_in_S0 = 0 # collect_protect(t, 6 * (a) + 0)
step_in_S1 = 0 # collect_protect(t, 6 * (a) + 1)
step_out_dose = step_out_dose + cal_mAB_VHR_step_out_dose[t1, a + 1]
}
step_out = cal_mAB_VHR_step_out[t1, a + 1]
cpo <- cal_pal(t1, a)
cpo_dose <- cal_pal_dose(t1, a)
cMo <- cal_mAB_VHR(t1, a)
cMo_dose <- cal_mAB_VHR_dose(t1, a)
S0 <- x[a * ag + (s - 3) * sg + r * rg + 1]
S1 <- x[a * ag + (s - 3) * sg + r * rg + 6]
S2 <- x[a * ag + (s - 3) * sg + r * rg + 11]
S3 <- x[a * ag + (s - 3) * sg + r * rg + 16]
SN <- 1
} else if (r == 2) {
if(s == 5) {
step_in_S0 = 0 # collect_protect(t, 6 * (a) + 2)
step_in_S1 = 0 # collect_protect(t, 6 * (a) + 3)
step_out_dose = step_out_dose + cal_mAB_HR_step_out_dose[t1, a + 1]
}
step_out = cal_mAB_HR_step_out[t1, a + 1]
cMo <- cal_mAB_HR(t1, a)
cLo <- cal_LAV_HR(t1, a)
cMo_dose <- cal_mAB_HR_dose(t1, a)
cLo_dose <- cal_LAV_HR_dose(t1, a)
S0 <- x[a * ag + (s - 3) * sg + r * rg + 1]
S1 <- x[a * ag + (s - 3) * sg + r * rg + 6]
S2 <- x[a * ag + (s - 3) * sg + r * rg + 11]
S3 <- x[a * ag + (s - 3) * sg + r * rg + 16]
SN <- 1
} else {
if(s == 5) {
step_in_S0 = collect_protect(t, 6 * a + 4 + 1) + collect_protect(t, 6 * a + 0 + 1) + collect_protect(t, 6 * a + 2 + 1)
step_in_S1 = collect_protect(t, 6 * a + 5 + 1) + collect_protect(t, 6 * a + 1 + 1) + collect_protect(t, 6 * a + 3 + 1)
step_out_dose = step_out_dose + cal_mAB_LR_step_out_dose[t1, a + 1]
}
step_out = cal_mAB_LR_step_out[t1, a + 1]
cMo <- cal_mAB_LR(t1, a)
cMo_dose <- cal_mAB_LR_dose(t1, a)
if (s == 4) {
cLo <- vac_cal(t1, a)
cLo_dose <- vac_cal_dose(t1, a)
S0 <- x[a * ag + (s - 3) * sg + r * rg + 1]
S1 <- x[a * ag + (s - 3) * sg + r * rg + 6]
S2 <- x[a * ag + (s - 3) * sg + r * rg + 11]
S3 <- x[a * ag + (s - 3) * sg + r * rg + 16]
} else {
SN <- 1
cLo <- cal_LAV_LR(t1, a)
cLo_dose <- cal_LAV_LR_dose(t1, a)
S0 <- x[a * ag + (s - 3) * sg + r * rg + 1]
S1 <- x[a * ag + (s - 3) * sg + r * rg + 6]
S2 <- x[a * ag + (s - 3) * sg + r * rg + 11]
S3 <- x[a * ag + (s - 3) * sg + r * rg + 16]
}
}
}
else
{
}
}
for (i in 1:21) {
x_tot <- x_tot + x[o + i]
PST <- PST + PS[i]
}
if (PST < 1) {
PST <- 1
}
# Keeping track of doses
protectpal <- protectpal + cpo_dose * x_tot
protectmabs <- protectmabs + cMo_dose * x_tot
protectLAV <- protectLAV + cLo_dose * x_tot
protectmat <- protectmat + cMa_dose * x_tot
if (s == 5) {
if (r == 1) {
collect_protect[t + eff_wane_step, 6 * (a + 5) + 0] <- x_tot_1 * step_out
collect_protect[t + eff_wane_step, 6 * (a + 5) + 1] <- x_tot_2 * step_out
}
if (r == 2) {
collect_protect(t + eff_wane_step, 6 * (a + 5) + 2) <- x_tot_1 * step_out
collect_protect(t + eff_wane_step, 6 * (a + 5) + 3) <- x_tot_2 * step_out
} else if (r == 3) {
collect_protect(t + eff_wane_step, 6 * (a + 5) + 4) <- x_tot_1 * step_out
collect_protect(t + eff_wane_step, 6 * (a + 5) + 5) <- x_tot_2 * step_out
}
}
mab_trans <- numeric(12)
lav_trans <- numeric(4)
for (i in 1:12) {
state <- x[p + i - 1]
prot <- x[o + i - 1] * cMo
if ((state - prot) < 0) {
mab_trans[i] <- x[p + i - 1] * cMo
} else {
mab_trans[i] <- prot
}
}
for (i in 1:2) {
x_tot_1 <- x_tot_1 + mab_trans[i]
}
for (i in 3:7) {
x_tot_2 <- x_tot_2 + mab_trans[i]
}
for (i in 8:12) {
x_tot_3 <- x_tot_3 + mab_trans[i]
}
pos <- c(2, 7, 12, 17)
for (i in 1:4) {
state <- x[p + pos[i]]
prot <- x[o + pos[i]] * cLo
if ((state - prot) < 0) {
lav_trans[i] <- x[p + pos[i]] * cLo
} else {
lav_trans[i] <- prot
}
}
# Differential Equations
dxdt[p+0] = (1.0-p_vul)*mu*rp - x[p+0]*xi*xi_b - (x[p+0])*ej1 + PS[0]*ej*rp*u - mab_trans[0]
dxdt[p+1] = p_vul*mu*rp  + x[p+0]*xi*xi_b + lossMS0 - x[p+1]*In*beta - (x[p+1])*ej1 + PS[1]*ej*rp*u - mab_trans[1] - x[o+1]*step_out - lav_trans[0] + step_in_S0 + x[p+23]*(eff_wane_mat)
dxdt[p+2] = x[p+1]*In*beta                 - x[p+2]*si          - (x[p+2])*ej1 + PS[2]*ej*rp*u -mab_trans[2] - x[p+2]*step_out
dxdt[p+3] = x[p+2]*si*pA[a]                - x[p+3]*ga0*rho     -  (x[p+3])*ej1 + PS[3]*ej*rp*u - mab_trans[3] - x[p+3]*step_out
dxdt[p+4] = x[p+2]*si*(1.0-pA[a])          - x[p+4]*ga0         - (x[p+4])*ej1 + PS[4]*ej*rp*u - mab_trans[4] - x[p+4]*step_out
dxdt[p+5] = x[p+4]*ga0 + x[p+3]*ga0*rho    - x[p+5]*om          - (x[p+5])*ej1 + PS[5]*ej*rp*u - mab_trans[5] - x[p+5]*step_out
dxdt[p+6] = x[p+5]*om                      - d1*x[p+6]*In*beta + lossMS1  - (x[p+6])*ej1 + PS[6]*ej*rp*u - mab_trans[6] + loss_lav_S0 - lav_trans[1] + step_in_S1
dxdt[p+7] = d1*x[p+6]*In*beta              - x[p+7]*si          - (x[p+7])*ej1 + PS[7]*ej*rp*u - mab_trans[7]
dxdt[p+8] = x[p+7]*si*pA[a]                - x[p+8]*ga1*rho     - (x[p+8])*ej1 + PS[8]*ej*rp*u - mab_trans[8]
dxdt[p+9] = x[p+7]*si*(1.0-pA[a])          - x[p+9]*ga1         - (x[p+9])*ej1 + PS[9]*ej*rp*u - mab_trans[9]
dxdt[p+10] = x[p+9]*ga1 + x[p+8]*ga1*rho   - x[p+10]*om         - (x[p+10])*ej1 + PS[10]*ej*rp*u - mab_trans[10]
dxdt[p+11] = x[p+10]*om                    - d2*x[p+11]*In*beta + lossMS2 - (x[p+11])*ej1 + PS[11]*ej*rp*u - mab_trans[11] + loss_lav_S1 - lav_trans[2]
dxdt[p+12] = d2*x[p+11]*In*beta            - x[p+12]*si         - (x[p+12])*ej1 + PS[12]*ej*rp*u
dxdt[p+13] = x[p+12]*si*pA[a]              - x[p+13]*ga2*rho    - (x[p+13])*ej1 + PS[13]*ej*rp*u
dxdt[p+14] = x[p+12]*si*(1.0-pA[a])        - x[p+14]*ga2        - (x[p+14])*ej1 + PS[14]*ej*rp*u
dxdt[p+15] = x[p+14]*ga2 + x[p+13]*ga2*rho - x[p+15]*om         - (x[p+15])*ej1 + PS[15]*ej*rp*u
dxdt[p+16] = x[p+15]*om + x[p+20]*om       - d3*x[p+16]*In*beta - (x[p+16])*ej1 + PS[16]*ej*rp*u  + loss_lav_S2 + loss_lav_S3 - lav_trans[3]
dxdt[p+17] = d3*x[p+16]*In*beta            - x[p+17]*si         - (x[p+17])*ej1 + PS[17]*ej*rp*u
dxdt[p+18] = x[p+17]*si*pA[a]              - x[p+18]*ga3*rho    - (x[p+18])*ej1 + PS[18]*ej*rp*u
dxdt[p+19] = x[p+17]*si*(1.0-pA[a])        - x[p+19]*ga3        - (x[p+19])*ej1 + PS[19]*ej*rp*u
dxdt[p+20] = x[p+19]*ga3 + x[p+18]*ga3*rho - x[p+20]*om         - (x[p+20])*ej1 + PS[20]*ej*rp*u
# Maternal vaccination
dxdt[p+21] = mu_mat*rp - x[p+21]*eff_wane_mat - x[p+21]*ej1 + PS[21]*ej*u*rp
dxdt[p+22] = x[p+21]*eff_wane_mat - x[p+22]*eff_wane_mat - x[p+22]*ej1 + PS[22]*ej*u*rp
dxdt[p+23] = x[p+22]*eff_wane_mat - x[p+23]*eff_wane_mat - x[p+23]*ej1 + PS[23]*ej*u*rp
# Monoclonal protection
dxdt[p+24] = x_tot_1 - x[p+24]*eff_wane_mab  - x[p+24]*ej1 + PS[24]*ej*u*rp
dxdt[p+25] = x[p+24]*eff_wane_mab - x[p+25]*eff_wane_mab  - x[p+25]*ej1 + PS[25]*ej*u*rp
dxdt[p+26] = x[p+25]*eff_wane_mab - lossMS0 - x[p+26]*ej1 + PS[26]*ej*u*rp
dxdt[p+27] = x_tot_2 - x[p+27]*eff_wane_mab - x[p+27]*ej1 + PS[27]*ej*u*rp
dxdt[p+28] = x[p+27]*eff_wane_mab - x[p+28]*eff_wane_mab - x[p+28]*ej1 + PS[28]*ej*u*rp
dxdt[p+29] = x[p+28]*eff_wane_mab - lossMS1 - x[p+29]*ej1 + PS[29]*ej*u*rp
dxdt[p+30] = x_tot_3 - x[p+30]*eff_wane_mab - x[p+30]*ej1 + PS[30]*ej*u*rp
dxdt[p+31] = x[p+30]*eff_wane_mab - x[p+31]*eff_wane_mab - x[p+31]*ej1 + PS[31]*ej*u*rp
dxdt[p+32] = x[p+31]*eff_wane_mab - lossMS2 - x[p+32]*ej1 + PS[32]*ej*u*rp
# LAV protection
dxdt[p+33] = lav_trans[0] - x[p+33]*eff_wane_lav - x[p+33]*ej1 + PS[33]*ej*u*rp
dxdt[p+34] = x[p+33]*eff_wane_lav - x[p+34]*eff_wane_lav - x[p+34]*ej1 + PS[34]*ej*u*rp
dxdt[p+35] = x[p+34]*eff_wane_lav - loss_lav_S0 - x[p+35]*ej1 + PS[35]*ej*u*rp
dxdt[p+36] = lav_trans[1] - x[p+36]*eff_wane_lav - x[p+36]*ej1 + PS[36]*ej*u*rp
dxdt[p+37] = x[p+36]*eff_wane_lav - x[p+37]*eff_wane_lav - x[p+37]*ej1 + PS[37]*ej*u*rp
dxdt[p+38] = x[p+37]*eff_wane_lav - loss_lav_S1 - x[p+38]*ej1 + PS[38]*ej*u*rp
dxdt[p+39] = lav_trans[2] - x[p+39]*eff_wane_lav - x[p+39]*ej1 + PS[39]*ej*u*rp
dxdt[p+40] = x[p+39]*eff_wane_lav - x[p+40]*eff_wane_lav - x[p+40]*ej1 + PS[40]*ej*u*rp
dxdt[p+41] = x[p+40]*eff_wane_lav - loss_lav_S2 - x[p+41]*ej1 + PS[41]*ej*u*rp
dxdt[p+42] = lav_trans[3] - x[p+42]*eff_wane_lav - x[p+42]*ej1 + PS[42]*ej*u*rp
dxdt[p+43] = x[p+42]*eff_wane_lav - x[p+43]*eff_wane_lav - x[p+43]*ej1 + PS[43]*ej*u*rp
dxdt[p+44] = x[p+43]*eff_wane_lav - loss_lav_S3 - x[p+44]*ej1 + PS[44]*ej*u*rp
}
}
# Vaccine groups
dxdt[a*ag + 6*sg + 0] = si*(x[cj+3*sg+0*rg+2] + x[cj+4*sg+0*rg+2] + x[cj+5*sg+0*rg+2] + x[cj+3*sg+1*rg+2] + x[cj+4*sg+1*rg+2] + x[cj+5*sg+1*rg+2] + x[cj+3*sg+2*rg+2] + x[cj+4*sg+2*rg+2] + x[cj+5*sg+2*rg+2])
dxdt[a*ag + 6*sg + 1] = protectpal
dxdt[a*ag + 6*sg + 2] = protectmabs + step_out_dose
dxdt[a*ag + 6*sg + 3] = protectLAV
dxdt[a*ag + 6*sg + 4] = protectmat
dxdt[a*ag + 6*sg + 5] = 0
dxdt[a*ag + 6*sg + 6] = 0
dxdt[a*ag + 6*sg + 7] = 0
# Monitoring Parent
dxdt[a*ag + 6*sg + 8] =  si*(x[cj+3*sg+0*rg+2]+x[cj+3*sg+0*rg+7]+x[cj+3*sg+0*rg+12]+x[cj+3*sg+0*rg+17]) # VHR
dxdt[a*ag + 6*sg + 9] =  si*(x[cj+3*sg+1*rg+2]+x[cj+3*sg+1*rg+7]+x[cj+3*sg+1*rg+12]+x[cj+3*sg+1*rg+17]) # HR
dxdt[a*ag + 6*sg + 10] = si*(x[cj+3*sg+2*rg+2]+x[cj+3*sg+2*rg+7]+x[cj+3*sg+2*rg+12]+x[cj+3*sg+2*rg+17]) # LR
# Monitoring Cocoon
dxdt[a*ag + 6*sg + 11] = si*(x[cj+4*sg+0*rg+2]+x[cj+4*sg+0*rg+7]+x[cj+4*sg+0*rg+12]+x[cj+4*sg+0*rg+17]) # VHR
dxdt[a*ag + 6*sg + 12] = si*(x[cj+4*sg+1*rg+2]+x[cj+4*sg+1*rg+7]+x[cj+4*sg+1*rg+12]+x[cj+4*sg+1*rg+17]) # HR
dxdt[a*ag + 6*sg + 13] = si*(x[cj+4*sg+2*rg+2]+x[cj+4*sg+2*rg+7]+x[cj+4*sg+2*rg+12]+x[cj+4*sg+2*rg+17]) # LR
# Monitoring Neither
dxdt[a*ag + 6*sg + 14] = si*(x[cj+5*sg+0*rg+2]+x[cj+5*sg+0*rg+7]+x[cj+5*sg+0*rg+12]+x[cj+5*sg+0*rg+17]) # VHR
dxdt[a*ag + 6*sg + 15] = si*(x[cj+5*sg+1*rg+2]+x[cj+5*sg+1*rg+7]+x[cj+5*sg+1*rg+12]+x[cj+5*sg+1*rg+17]) # HR
dxdt[a*ag + 6*sg + 16] = si*(x[cj+5*sg+2*rg+2]+x[cj+5*sg+2*rg+7]+x[cj+5*sg+2*rg+12]+x[cj+5*sg+2*rg+17]) # LR
x[a*ag + 6*sg + 17] = N_tot_n[a]
x[a*ag + 6*sg + 18] = N_tot_c[a]
x[a*ag + 6*sg + 19] = N_tot_p[a]
x[a*ag + 6*sg + 20] = N_tot_n_v[a]
x[a*ag + 6*sg + 21] = N_tot_c_v[a]
x[a*ag + 6*sg + 22] = N_tot_p_v[a]
}
# Return the list of derivatives
list(dxdt)
})
}
library(deSolve)
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dM <- mu * PR - xi * M
dS0 <- xi * M - lambda0 * S0 + omega * R0
dE0 <- lambda0 * S0 - sigma * E0
dI0 <- (1 - p) * sigma * E0 - gamma0 * I0
dR0 <- gamma0 * I0 - omega * R0
dA0 <- p * sigma * E0 - gamma0 * A0
dS1 <- omega * R1 - lambda1 * S1
dE1 <- lambda1 * S1 - sigma * E1
dI1 <- (1 - p) * sigma * E1 - gamma1 * I1
dR1 <- gamma1 * I1 - omega * R1
dA1 <- p * sigma * E1 - gamma1 * A1
dS2 <- omega * R2 - lambda2 * S2
dE2 <- lambda2 * S2 - sigma * E2
dI2 <- (1 - p) * sigma * E2 - gamma2 * I2
dR2 <- gamma2 * I2 - omega * R2
dA2 <- p * sigma * E2 - gamma2 * A2
dS3 <- omega * R3 - lambda3 * S3
dE3 <- lambda3 * S3 - sigma * E3
dI3 <- (1 - p) * sigma * E3 - gamma3 * I3
dR3 <- gamma3 * I3 - omega * R3
dA3 <- p * sigma * E3 - gamma3 * A3
return(list(c(dM, dS0, dE0, dI0, dR0, dA0, dS1, dE1, dI1, dR1, dA1,
dS2, dE2, dI2, dR2, dA2, dS3, dE3, dI3, dR3, dA3)))
})
}
state_initial <- c(M = 2000, S0 = 100000, E0 = 500, I0 = 50, R0 = 0, A0 = 100,
S1 = 0, E1 = 0, I1 = 0, R1 = 0, A1 = 0,
S2 = 0, E2 = 0, I2 = 0, R2 = 0, A2 = 0,
S3 = 0, E3 = 0, I3 = 0, R3 = 0, A3 = 0)
parameters <- c(mu = 0.02, PR = 0.01, xi = 0.1, sigma = 0.5,
gamma0 = 0.1, gamma1 = 0.1, gamma2 = 0.1, gamma3 = 0.1,
omega = 0.01, p = 0.2,
lambda0 = 0.05, lambda1 = 0.05, lambda2 = 0.05, lambda3 = 0.05)
times <- seq(0, 100, by = 1)
ode(y = state_initial, times = times, func = sir_model, parms = parameters)
state_initial <- c(M = 2000, S0 = 100000, E0 = 500, I0 = 50, R0 = 0, A0 = 100,
S1 = 75000, E1 = 400, I1 = 40, R1 = 0, A1 = 0,
S2 = 50000, E2 = 300, I2 = 30, R2 = 0, A2 = 0,
S3 = 30000, E3 = 200, I3 = 20, R3 = 0, A3 = 0)
parameters <- c(mu = 0.02, PR = 0.01, xi = 0.1, sigma = 0.5,
gamma0 = 0.1, gamma1 = 0.1, gamma2 = 0.1, gamma3 = 0.1,
omega = 0.01, p = 0.2,
lambda0 = 0.05, lambda1 = 0.05, lambda2 = 0.05, lambda3 = 0.05)
times <- seq(0, 100, by = 1)
ode(y = state_initial, times = times, func = sir_model, parms = parameters)
results <- ode(y = state_initial, times = times, func = sir_model, parms = parameters)
results_df <- as.data.frame(results)
par(mfrow=c(3,2))
par(mfrow=c(3,2))
plot(results_df$time, results_df$M, type = 'l', col = 'blue', xlab = 'Time', ylab = 'Population', main = 'Maternal Immunity')
plot(results_df$time, results_df$S0, type = 'l', col = 'green', xlab = 'Time', ylab = 'Population', main = 'Susceptible Level 0')
lines(results_df$time, results_df$S1, col = 'red')
lines(results_df$time, results_df$S2, col = 'blue')
lines(results_df$time, results_df$S3, col = 'purple')
legend("topright", legend = c("S0", "S1", "S2", "S3"), fill = c("green", "red", "blue", "purple"))
plot(results_df$time, results_df$E0, type = 'l', col = 'green', xlab = 'Time', ylab = 'Population', main = 'Exposed Level 0')
lines(results_df$time, results_df$E1, col = 'red')
lines(results_df$time, results_df$E2, col = 'blue')
lines(results_df$time, results_df$E3, col = 'purple')
legend("topright", legend = c("E0", "E1", "E2", "E3"), fill = c("green", "red", "blue", "purple"))
plot(results_df$time, results_df$I0, type = 'l', col = 'green', xlab = 'Time', ylab = 'Population', main = 'Infected Level 0')
lines(results_df$time, results_df$I1, col = 'red')
lines(results_df$time, results_df$I2, col = 'blue')
lines(results_df$time, results_df$I3, col = 'purple')
legend("topright", legend = c("I0", "I1", "I2", "I3"), fill = c("green", "red", "blue", "purple"))
plot(results_df$time, results_df$R0, type = 'l', col = 'green', xlab = 'Time', ylab = 'Population', main = 'Recovered Level 0')
lines(results_df$time, results_df$R1, col = 'red')
lines(results_df$time, results_df$R2, col = 'blue')
lines(results_df$time, results_df$R3, col = 'purple')
legend("topright", legend = c("R0", "R1", "R2", "R3"), fill = c("green", "red", "blue", "purple"))
par(mfrow=c(1,1))
plot(results_df$time, results_df$M, type = 'l', col = 'black', xlab = 'Time', ylab = 'Population', main = 'Compartmental Model Dynamics', ylim = range(0, max(results_df)))
lines(results_df$time, results_df$S0, col = 'green')
lines(results_df$time, results_df$E0, col = 'orange')
lines(results_df$time, results_df$I0, col = 'red')
lines(results_df$time, results_df$R0, col = 'blue')
lines(results_df$time, results_df$S1, col = 'green', lty = 2)
lines(results_df$time, results_df$E1, col = 'orange', lty = 2)
lines(results_df$time, results_df$I1, col = 'red', lty = 2)
lines(results_df$time, results_df$R1, col = 'blue', lty = 2)
lines(results_df$time, results_df$S2, col = 'green', lty = 3)
lines(results_df$time, results_df$E2, col = 'orange', lty = 3)
lines(results_df$time, results_df$I2, col = 'red', lty = 3)
lines(results_df$time, results_df$R2, col = 'blue', lty = 3)
lines(results_df$time, results_df$S3, col = 'green', lty = 4)
lines(results_df$time, results_df$E3, col = 'orange', lty = 4)
lines(results_df$time, results_df$I3, col = 'red', lty = 4)
lines(results_df$time, results_df$R3, col = 'blue', lty = 4)
# Add a legend
legend("topright", legend = c("M", "S0", "E0", "I0", "R0", "S1", "E1", "I1", "R1", "S2", "E2", "I2", "R2", "S3", "E3", "I3", "R3"),
col = c('black', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue'),
lty = c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4),
bty = 'n', cex = 0.6)
plot(results_df$time, results_df$M, type = 'l', col = 'black', xlab = 'Time', ylab = 'Population', main = 'RSV Model Dynamics', ylim = range(0, max(results_df)))
lines(results_df$time, results_df$S0, col = 'green')
lines(results_df$time, results_df$E0, col = 'orange')
lines(results_df$time, results_df$I0, col = 'red')
lines(results_df$time, results_df$R0, col = 'blue')
lines(results_df$time, results_df$S1, col = 'green', lty = 2)
lines(results_df$time, results_df$E1, col = 'orange', lty = 2)
lines(results_df$time, results_df$I1, col = 'red', lty = 2)
lines(results_df$time, results_df$R1, col = 'blue', lty = 2)
lines(results_df$time, results_df$S2, col = 'green', lty = 3)
lines(results_df$time, results_df$E2, col = 'orange', lty = 3)
lines(results_df$time, results_df$I2, col = 'red', lty = 3)
lines(results_df$time, results_df$R2, col = 'blue', lty = 3)
lines(results_df$time, results_df$S3, col = 'green', lty = 4)
lines(results_df$time, results_df$E3, col = 'orange', lty = 4)
lines(results_df$time, results_df$I3, col = 'red', lty = 4)
lines(results_df$time, results_df$R3, col = 'blue', lty = 4)
legend("topright", legend = c("M", "S0", "E0", "I0", "R0", "S1", "E1", "I1", "R1", "S2", "E2", "I2", "R2", "S3", "E3", "I3", "R3"),
col = c('black', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue'),
lty = c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4),
bty = 'n', cex = 0.6)
state_initial <- c(M = 20000, S0 = 100000, E0 = 500, I0 = 50, R0 = 0, A0 = 100,
S1 = 75000, E1 = 400, I1 = 40, R1 = 0, A1 = 0,
S2 = 50000, E2 = 300, I2 = 30, R2 = 0, A2 = 0,
S3 = 30000, E3 = 200, I3 = 20, R3 = 0, A3 = 0)
results <- ode(y = state_initial, times = times, func = sir_model, parms = parameters)
results_df <- as.data.frame(results)
plot(results_df$time, results_df$M, type = 'l', col = 'black', xlab = 'Time', ylab = 'Population', main = 'RSV Model Dynamics', ylim = range(0, max(results_df)))
lines(results_df$time, results_df$S0, col = 'green')
lines(results_df$time, results_df$E0, col = 'orange')
lines(results_df$time, results_df$I0, col = 'red')
lines(results_df$time, results_df$R0, col = 'blue')
lines(results_df$time, results_df$S1, col = 'green', lty = 2)
lines(results_df$time, results_df$E1, col = 'orange', lty = 2)
lines(results_df$time, results_df$I1, col = 'red', lty = 2)
lines(results_df$time, results_df$R1, col = 'blue', lty = 2)
lines(results_df$time, results_df$S2, col = 'green', lty = 3)
lines(results_df$time, results_df$E2, col = 'orange', lty = 3)
lines(results_df$time, results_df$I2, col = 'red', lty = 3)
lines(results_df$time, results_df$R2, col = 'blue', lty = 3)
lines(results_df$time, results_df$S3, col = 'green', lty = 4)
lines(results_df$time, results_df$E3, col = 'orange', lty = 4)
lines(results_df$time, results_df$I3, col = 'red', lty = 4)
lines(results_df$time, results_df$R3, col = 'blue', lty = 4)
legend("topright", legend = c("M", "S0", "E0", "I0", "R0", "S1", "E1", "I1", "R1", "S2", "E2", "I2", "R2", "S3", "E3", "I3", "R3"),
col = c('black', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue'),
lty = c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4),
bty = 'n', cex = 0.6)
times <- seq(0, 100, by = 10)
results <- ode(y = state_initial, times = times, func = sir_model, parms = parameters)
results_df <- as.data.frame(results)
plot(results_df$time, results_df$M, type = 'l', col = 'black', xlab = 'Time', ylab = 'Population', main = 'RSV Model Dynamics', ylim = range(0, max(results_df)))
lines(results_df$time, results_df$S0, col = 'green')
lines(results_df$time, results_df$E0, col = 'orange')
lines(results_df$time, results_df$I0, col = 'red')
lines(results_df$time, results_df$R0, col = 'blue')
lines(results_df$time, results_df$S1, col = 'green', lty = 2)
lines(results_df$time, results_df$E1, col = 'orange', lty = 2)
lines(results_df$time, results_df$I1, col = 'red', lty = 2)
lines(results_df$time, results_df$R1, col = 'blue', lty = 2)
lines(results_df$time, results_df$S2, col = 'green', lty = 3)
lines(results_df$time, results_df$E2, col = 'orange', lty = 3)
lines(results_df$time, results_df$I2, col = 'red', lty = 3)
lines(results_df$time, results_df$R2, col = 'blue', lty = 3)
lines(results_df$time, results_df$S3, col = 'green', lty = 4)
lines(results_df$time, results_df$E3, col = 'orange', lty = 4)
lines(results_df$time, results_df$I3, col = 'red', lty = 4)
lines(results_df$time, results_df$R3, col = 'blue', lty = 4)
legend("topright", legend = c("M", "S0", "E0", "I0", "R0", "S1", "E1", "I1", "R1", "S2", "E2", "I2", "R2", "S3", "E3", "I3", "R3"),
col = c('black', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue'),
lty = c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4),
bty = 'n', cex = 0.6)
times <- seq(0, 100, by = 1)
results <- ode(y = state_initial, times = times, func = sir_model, parms = parameters)
results_df <- as.data.frame(results)
plot(results_df$time, results_df$M, type = 'l', col = 'black', xlab = 'Time', ylab = 'Population', main = 'RSV Model Dynamics', ylim = range(0, max(results_df)))
lines(results_df$time, results_df$S0, col = 'green')
lines(results_df$time, results_df$E0, col = 'orange')
lines(results_df$time, results_df$I0, col = 'red')
lines(results_df$time, results_df$R0, col = 'blue')
lines(results_df$time, results_df$S1, col = 'green', lty = 2)
lines(results_df$time, results_df$E1, col = 'orange', lty = 2)
lines(results_df$time, results_df$I1, col = 'red', lty = 2)
lines(results_df$time, results_df$R1, col = 'blue', lty = 2)
lines(results_df$time, results_df$S2, col = 'green', lty = 3)
lines(results_df$time, results_df$E2, col = 'orange', lty = 3)
lines(results_df$time, results_df$I2, col = 'red', lty = 3)
lines(results_df$time, results_df$R2, col = 'blue', lty = 3)
lines(results_df$time, results_df$S3, col = 'green', lty = 4)
lines(results_df$time, results_df$E3, col = 'orange', lty = 4)
lines(results_df$time, results_df$I3, col = 'red', lty = 4)
lines(results_df$time, results_df$R3, col = 'blue', lty = 4)
legend("topright", legend = c("M", "S0", "E0", "I0", "R0", "S1", "E1", "I1", "R1", "S2", "E2", "I2", "R2", "S3", "E3", "I3", "R3"),
col = c('black', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue'),
lty = c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4),
bty = 'n', cex = 0.6)
times <- seq(0, 60, by = 1)
results <- ode(y = state_initial, times = times, func = sir_model, parms = parameters)
results_df <- as.data.frame(results)
plot(results_df$time, results_df$M, type = 'l', col = 'black', xlab = 'Time', ylab = 'Population', main = 'RSV Model Dynamics', ylim = range(0, max(results_df)))
lines(results_df$time, results_df$S0, col = 'green')
lines(results_df$time, results_df$E0, col = 'orange')
lines(results_df$time, results_df$I0, col = 'red')
lines(results_df$time, results_df$R0, col = 'blue')
lines(results_df$time, results_df$S1, col = 'green', lty = 2)
lines(results_df$time, results_df$E1, col = 'orange', lty = 2)
lines(results_df$time, results_df$I1, col = 'red', lty = 2)
lines(results_df$time, results_df$R1, col = 'blue', lty = 2)
lines(results_df$time, results_df$S2, col = 'green', lty = 3)
lines(results_df$time, results_df$E2, col = 'orange', lty = 3)
lines(results_df$time, results_df$I2, col = 'red', lty = 3)
lines(results_df$time, results_df$R2, col = 'blue', lty = 3)
lines(results_df$time, results_df$S3, col = 'green', lty = 4)
lines(results_df$time, results_df$E3, col = 'orange', lty = 4)
lines(results_df$time, results_df$I3, col = 'red', lty = 4)
lines(results_df$time, results_df$R3, col = 'blue', lty = 4)
legend("topright", legend = c("M", "S0", "E0", "I0", "R0", "S1", "E1", "I1", "R1", "S2", "E2", "I2", "R2", "S3", "E3", "I3", "R3"),
col = c('black', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue', 'green', 'orange', 'red', 'blue'),
lty = c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4),
bty = 'n', cex = 0.6)
